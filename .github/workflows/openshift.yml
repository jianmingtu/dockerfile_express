# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

### The OpenShift Starter workflow will:
# - Checkout your repository
# - Perform a Docker build
# - Push the built image to an image registry
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet.

### Before you begin:
# - Have write access to a container image registry such as quay.io or Dockerhub.
# - Have access to an OpenShift cluster.
#   - For instructions to get started with OpenShift see https://www.openshift.com/try
# - The project you wish to add this workflow to should have a Dockerfile.
#   - If you don't have a Dockerfile at the repository root, see the buildah-build step.
#   - Builds from scratch are also available, but require more configuration.

### To get the workflow running:
# 1. Add this workflow to your repository.
# 2. Edit the top-level 'env' section, which contains a list of environment variables that must be configured.
# 3. Create the secrets referenced in the 'env' section under your repository Settings.
# 4. Edit the 'branches' in the 'on' section to trigger the workflow on a push to your branch.
# 5. Commit and push your changes.

# For a more sophisticated example, see https://github.com/redhat-actions/spring-petclinic/blob/main/.github/workflows/petclinic-sample.yaml
# Also see our GitHub organization, https://github.com/redhat-actions/
# ▶️ See a video of how to set up this workflow at https://www.youtube.com/watch?v=6hgBO-1pKho

name: OpenShift

# ⬇️  Modify the fields marked with ⬇️ to fit your project, and create any secrets that are referenced.
# https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets
env:
  # ⬇️ EDIT with your registry and registry path.
  REGISTRY: docker.io/jianmingtu
  # ⬇️ EDIT with your registry username.
  REGISTRY_USER: jianmingtu
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  # ⬇️ EDIT to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

  # ⬇️ EDIT with any additional port your application should expose.
  # By default, oc new-app action creates a service to the image's lowest numeric exposed port.
  APP_PORT: 3000

  # ⬇️ EDIT if you wish to set the kube context's namespace after login. Leave blank to use the default namespace.
  OPENSHIFT_NAMESPACE: tech

  # If you wish to manually provide the APP_NAME and TAG, set them here, otherwise they will be auto-detected.
  APP_NAME: ""
  TAG: ""

on:
  # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      app:
        description: 'App Name (jag-role-registry)'    
        required: true
        default: jag-role-registry
      env:
        type: choice
        description: Image Target environment
        options: 
        - dev    
        required: true
        default: 'dev'

jobs:
  build-scan-image:
    name: Build & Scan Image
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the version number which is prefixed with the Github release branches in format release/{version}
      - name: Get Release Version
        run: |
          branch=${GITHUB_REF##*/}
          version=$(echo $branch | cut -d "/" -f2-)
          echo "releaseVersion=$version" >> $GITHUB_ENV
      
      # Get Git latest short Sha# from the release branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get git commit short sha
        id: sha
        run: |
          shortSha=$(echo $(git rev-parse --short HEAD) | cut -c1-7)
          echo "gitsha=$shortSha" >> $GITHUB_ENV  
          
      # Prints vital release paramters used
      - name: Print Release Variables
        run: |
          echo "Release Application: ${{ github.event.inputs.app }}"
          echo "Release Environment: ${{ github.event.inputs.env }}"
          echo "Release Version: ${{ env.releaseVersion }}"
          echo "Release Git Sha: ${{env.gitsha}}"  
          
      # #Login to OpenShift Container Repository - Kamloops (OC PROD)
      # - name: Login to OpenShift Container Repository - Kamloops (OC PROD)
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ env.REGISTRY_USER }}
      #     password: ${{ env.REGISTRY_PASSWORD }}
   

      #Build and push image to OpenShift Image stream - Kamloops (OC PROD)
      - name: Build & Push Image to Openshift Image Stream - Kamloops (OC PROD)
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: .
          IMAGE: jag-role-registry
        run: |
          docker build \
            --tag ${IMAGE} \
            ${CONTEXT}    

      #Login to Openshift using OC SA and Token of respective env. for Pod labelling - Kamloops (OC PROD)
      - name: Authenticate OC Env Specific SA - Kamloops (OC PROD)
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: tujianming-dev
        with:
          openshift_server_url: https://api.sandbox-m3.1530.p1.openshiftapps.com:6443
          openshift_token: sha256~wgPZVq3KueGyV9OUH4M0zPYClKOOwdXlofmPtQzaK1w
          namespace: ${OPENSHIFT_NAMESPACE}            

      # This step should create a deployment, service, and route to run your app and expose it to the internet.
      # https://github.com/redhat-actions/oc-new-app#readme
      - name: Create and expose app
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: petclinic
          image: jag-role-registry
          namespace: tujianming-dev
          port: 3000       
